/**
 * Auto-Generated by Graph QL Codegen
 */

import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  AWSDate: string;
  AWSTime: string;
  AWSDateTime: string;
  AWSTimestamp: string;
  AWSEmail: string;
  AWSJSON: { [key: string]: any };
  AWSURL: string;
  AWSPhone: string;
  AWSIPAddress: string;
};

export type Mutation = {
  addHostRoleToUser: HostRole;
  cancelBooking: CancelBookingPayload;
  createBooking: CreateBookingPayload;
  createHostProfile: Host;
  /** Pay the balance for the booking */
  payBalance: PayBalancePayload;
  removeUserHostRole: HostRole;
  updateHostBusinessDetails: Host;
  updateHostContact: Host;
  updateHostProfile: Host;
  updateTripForm: TripForm;
  updateTripFormSettings: TripFormSettings;
};

export type MutationAddHostRoleToUserArgs = {
  urlSlug: Scalars['String'];
  userId: Scalars['ID'];
};

export type MutationCancelBookingArgs = {
  input: CancelBookingInput;
};

export type MutationCreateBookingArgs = {
  input: CreateBookingInput;
};

export type MutationCreateHostProfileArgs = {
  hostProfile: HostProfileInput;
};

export type MutationPayBalanceArgs = {
  input?: Maybe<PayBalanceInput>;
};

export type MutationRemoveUserHostRoleArgs = {
  hostId: Scalars['ID'];
  userId: Scalars['ID'];
};

export type MutationUpdateHostBusinessDetailsArgs = {
  id: Scalars['ID'];
  businessDetails?: Maybe<HostBusinessDetailsInput>;
};

export type MutationUpdateHostContactArgs = {
  id: Scalars['ID'];
  hostContact?: Maybe<HostContactDetailsInput>;
};

export type MutationUpdateHostProfileArgs = {
  id: Scalars['ID'];
  hostProfile: UpdateHostProfileInput;
};

export type MutationUpdateTripFormArgs = {
  input: TripFormInput;
};

export type MutationUpdateTripFormSettingsArgs = {
  input: TripFormSettingsInput;
};

export type CreateBookingPayload = {
  booking: Booking;
};

export type CancelBookingPayload = {
  booking: Booking;
};

export type CreateBookingInput = {
  group: BookingGroupInput;
  user: BookingUserInput;
  spacesRequired: Scalars['Int'];
  payment?: Maybe<BookingPaymentInput>;
  credit?: Maybe<BookingCreditInput>;
};

export type BookingGroupInput = {
  /** Required to validate the price shown to the customer. This is the guest unit price. */
  guestPrice: PriceInput;
  id: Scalars['ID'];
};

export type BookingUserInput = {
  id: Scalars['ID'];
};

export type BookingDiscountInput = {
  amountZD: Scalars['Int'];
  code: Scalars['String'];
};

export type BookingCreditInput = {
  amountZD: Scalars['Int'];
};

export type BookingPaymentInput = {
  amount: PriceInput;
  card: TransactionCardInput;
  /**
   * TMT Booking ID
   *
   * The TMT Modal will auto-create a booking ID for each transaction.
   */
  tmtBookingID?: Maybe<Scalars['Int']>;
  /**
   * TMT Transaction ID
   *
   * The TMT Modal will return this in the `transaction_logged` response.
   */
  tmtTransactionID?: Maybe<Scalars['Int']>;
};

export type CancelBookingInput = {
  bookingID: Scalars['ID'];
  spaces: Array<Scalars['ID']>;
  type: BookingSpaceCancellationType;
};

export type Query = {
  booking: Booking;
  group?: Maybe<Group>;
  host: Host;
  hostByURL: Host;
  hosts?: Maybe<Hosts>;
  hostsUserWithRolesList?: Maybe<HostRole>;
  trip?: Maybe<Trip>;
  tripForm?: Maybe<TripForm>;
  tripFormSettings?: Maybe<TripFormSettings>;
  trustMyTravelAuthorisationCode: TrustMyTravelAuthorisationCode;
  user: User;
  usersHostRolesList?: Maybe<Array<Maybe<HostRole>>>;
};

export type QueryBookingArgs = {
  id: Scalars['ID'];
};

export type QueryGroupArgs = {
  id: Scalars['ID'];
};

export type QueryHostArgs = {
  id: Scalars['ID'];
};

export type QueryHostByUrlArgs = {
  urlSlug: Scalars['String'];
};

export type QueryHostsArgs = {
  limit?: Maybe<Scalars['Int']>;
  nextToken?: Maybe<Scalars['String']>;
};

export type QueryHostsUserWithRolesListArgs = {
  hostId: Scalars['ID'];
};

export type QueryTripArgs = {
  id: Scalars['ID'];
};

export type QueryTripFormArgs = {
  tripId?: Maybe<Scalars['String']>;
};

export type QueryTripFormSettingsArgs = {
  tripId?: Maybe<Scalars['String']>;
};

export type QueryTrustMyTravelAuthorisationCodeArgs = {
  price: PriceInput;
};

export type QueryUserArgs = {
  id: Scalars['ID'];
};

export type QueryUsersHostRolesListArgs = {
  userId: Scalars['ID'];
};

export type BookingConnection = {
  items?: Maybe<Array<Maybe<Booking>>>;
};

export type Booking = Node & {
  commissionTaxRate: BookingCommissionTaxRate;
  created: Scalars['AWSDateTime'];
  group: Group;
  host: Ref;
  id: Scalars['ID'];
  /**
   * All actions (transactions, cancellations, refunds, credits applied...) are shown broken down by their impact on
   * individual spaces, rather than the total booking. A single transaction can still be made to pay for several spaces -
   * the full transaction will be available from the Transaction type and then here if there are 2 spaces it will show
   * half on each space (or whatever the appropriate split was).
   */
  spaces: Array<BookingSpace>;
  trip: Trip;
  /** The booking owner */
  user: User;
};

export type BookingSpace = {
  /** Shows if a space is active (true) or cancelled (false) */
  active: Scalars['Boolean'];
  booking: Ref;
  /** Cancellation options will show unless the space is already cancelled */
  cancellationOptions: Array<BookingSpaceCancellationOption>;
  /** Sales tax (aka VAT) rate applicable to the host commission */
  commissionTaxRate: BookingCommissionTaxRate;
  /** Nominal sales tax (aka VAT) applicable to the host commission */
  commissionTax: Price;
  created: Scalars['AWSDateTime'];
  /** Commission before sales tax (aka VAT) */
  grossCommission: Price;
  guestBalance: Price;
  guestTotal: Price;
  hostBalance: Price;
  hostTotal: Price;
  id: Scalars['ID'];
  /**
   * The invoice lines show, in date order, everything that has an impact on the balance owed. The first line is always
   * the total owed, and then there can be lines for payments (-ve), credits (-ve), discounts (-ve), cancellation (-ve),
   * and refunds (+ve).
   */
  invoice: Array<BookingSpaceInvoiceLine>;
  /** Commission after sales tax (aka VAT) */
  netCommission: Price;
  guestDeposit: Price;
  hostDeposit: Price;
};

export type BookingSpaceInvoiceLine = {
  booking: Ref;
  bookingSpace: Ref;
  created: Scalars['AWSDateTime'];
  discount?: Maybe<Ref>;
  guestAmount: PriceWithOverpayment;
  hostAmount: PriceWithOverpayment;
  id: Scalars['ID'];
  transaction?: Maybe<Transaction>;
  type: BookingSpaceInvoiceLineType;
};

export type BookingSpaceCancellationOption = {
  guestCredit: Price;
  guestRefund: Price;
  hostRefund: Price;
  type: BookingSpaceCancellationType;
  /** Guest permission to use this cancellation option (true = has permission) */
  guestPermission: Scalars['Boolean'];
};

/** Get a TMT Authorisation code, for taking bookings using their payments modal */
export type TrustMyTravelAuthorisationCode = {
  code: Scalars['String'];
  channelID: Scalars['Int'];
};

/** Price */
export type PriceWithOverpayment = {
  amountZD: Scalars['Int'];
  currency: Currency;
  /**
   * Overpayment
   *
   * For transaction invoice lines only. There may have been an overpayment if e.g. a duplicate transaction was taken.
   *
   * For payments (-ve transaction invoice lines) this will show as -ve for an overpayment.
   *
   * For refunds (+ve transaction lines) this will show as +ve for an overpayment.
   */
  overpaymentZD?: Maybe<Scalars['Int']>;
};

export type Discount = Node & {
  code: Scalars['ID'];
  createdAt: Scalars['AWSDateTime'];
  /** If null, the discount is available for any trip group. */
  group?: Maybe<Group>;
  id: Scalars['ID'];
  nominalAmount?: Maybe<Price>;
  /** If null, the discount can be used an unlimited amount of times. */
  quantityRemaining?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['AWSDateTime'];
};

export enum BookingSpaceCancellationType {
  BALANCE_REFUND = 'BALANCE_REFUND',
  FULL_REFUND = 'FULL_REFUND',
  NO_REFUND = 'NO_REFUND',
}

export enum BookingSpaceInvoiceLineType {
  CANCELLATION = 'CANCELLATION',
  CREDIT = 'CREDIT',
  DISCOUNT = 'DISCOUNT',
  TOTAL = 'TOTAL',
  TRANSACTION = 'TRANSACTION',
}

export enum BookingCommissionTaxRate {
  /** European Commission zero-rated (the host is responsible for sales tax) */
  ECZERORATED = 'ECZERORATED',
  /** UK 20% Vat rate */
  OUTPUT = 'OUTPUT',
  /** Zero rated (e.g. for hosts where the place of supply is outside of the UK and EC) */
  ZERORATED = 'ZERORATED',
}

export enum TransactionType {
  CHARGEBACK = 'CHARGEBACK',
  PAYMENT = 'PAYMENT',
  REFUND = 'REFUND',
}

export enum TransactionProcessor {
  PAYPAL = 'PAYPAL',
  STRIPE = 'STRIPE',
  /** Legacy TMT */
  TMT = 'TMT',
  TMTV2 = 'TMTV2',
}

export type PayBalanceInput = {
  amount: PriceInput;
  bookingID: Scalars['ID'];
  card: TransactionCardInput;
  /**
   * TMT Booking ID
   *
   * The TMT Modal will auto-create a booking ID for each transaction.
   */
  tmtBookingID?: Maybe<Scalars['Int']>;
  /**
   * TMT Transaction ID
   *
   * The TMT Modal will return this in the `transaction_logged` response.
   */
  tmtTransactionID?: Maybe<Scalars['Int']>;
};

export type TransactionCardInput = {
  /** Billing address including cardholder name */
  address: TransactionAddressInput;
  /** Expiry Of the form YYYY-MM */
  expiry?: Maybe<Scalars['String']>;
};

export type PayBalancePayload = {
  transaction: Transaction;
};

export type TransactionAddressInput = {
  additionalNames?: Maybe<Scalars['String']>;
  addressLine1: Scalars['String'];
  addressLine2?: Maybe<Scalars['String']>;
  /** State, province or county */
  administrativeArea?: Maybe<Scalars['String']>;
  country: CountryCodes;
  /** Neighborhood or suburb */
  dependentLocality?: Maybe<Scalars['String']>;
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  /** City */
  locality?: Maybe<Scalars['String']>;
  organisation?: Maybe<Scalars['String']>;
  postalCode: Scalars['String'];
  sortingCode?: Maybe<Scalars['String']>;
};

export type Transaction = Node & {
  /** Amount is positive for a payment and negative for a refund (the opposite of a booking line) */
  amount: Price;
  /** Host amount is positive for a payment and negative for a refund (the opposite of a booking line) */
  hostAmount?: Maybe<Price>;
  /** Only shown for refunds - this is the ID of the original transaction that is being refunded here. */
  baseTransaction?: Maybe<Ref>;
  booking: Booking;
  card?: Maybe<TransactionCard>;
  created: Scalars['AWSDateTime'];
  id: Scalars['ID'];
  processor: TransactionProcessor;
  remoteID: Scalars['ID'];
  /** The remote ID of the host payment (__legacy TMT payments only__) */
  remoteIDHost?: Maybe<Scalars['ID']>;
  success: Scalars['Boolean'];
  /** Trust My Travel details (V2 API) */
  tmt?: Maybe<TmtDetails>;
  type: TransactionType;
};

export type TransactionCard = {
  /** Billing address including cardholder name */
  address?: Maybe<Address>;
  cardType?: Maybe<Scalars['String']>;
  lastFourDigits?: Maybe<Scalars['String']>;
};

export type TmtDetails = {
  channelID: Scalars['Int'];
  affiliateChannelID?: Maybe<Scalars['Int']>;
  /** TMT Booking ID */
  bookingID: Scalars['Int'];
};

export enum Gender {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
}

export type Guest = Node & {
  createdAt?: Maybe<Scalars['AWSDateTime']>;
  id: Scalars['ID'];
  tripForm?: Maybe<TripForm>;
  updatedAt?: Maybe<Scalars['AWSDateTime']>;
  user?: Maybe<User>;
};

export type Image = {
  id: Scalars['ID'];
  key: Scalars['String'];
  s3Bucket?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  type?: Maybe<ImageFileType>;
};

export enum ImageFileType {
  PNG = 'PNG',
  JPG = 'JPG',
}

export type Trip = Node & {
  active: Scalars['Boolean'];
  address: Address;
  description?: Maybe<Scalars['String']>;
  groups: GroupConnection;
  host: Ref;
  id: Scalars['ID'];
  slug: Scalars['String'];
  title: Scalars['String'];
};

export type Price = {
  currency: Currency;
  /** The zero-decimal amount (i.e. the amount in cents for USD/EUR, or pence for GBP). */
  amountZD: Scalars['Int'];
};

export type PriceInput = {
  currency: Currency;
  /** The zero-decimal amount (i.e. the amount in cents for USD/EUR, or pence for GBP). */
  amountZD: Scalars['Int'];
};

export enum Currency {
  GBP = 'GBP',
  USD = 'USD',
  EUR = 'EUR',
}

export type PageInfo = {
  hasNextToken?: Maybe<Scalars['Boolean']>;
  hasPreviousToken?: Maybe<Scalars['Boolean']>;
  nextToken?: Maybe<Scalars['String']>;
  previousToken?: Maybe<Scalars['String']>;
};

export type Node = {
  id: Scalars['ID'];
};

export type Nodes = {
  nextToken?: Maybe<Scalars['String']>;
};

/**
 * Reference
 *
 * Gives the ID of an object, but not the full underlying item in this query
 */
export type Ref = {
  id: Scalars['ID'];
};

/** Address uses the OASIS [XAL](https://www.oasis-open.org/committees/ciq/download.shtml) standard */
export type Address = {
  additionalNames?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  /** State, province or county */
  administrativeArea?: Maybe<Scalars['String']>;
  country: CountryCodes;
  /** Neighborhood or suburb */
  dependentLocality?: Maybe<Scalars['String']>;
  familyName?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  /** City */
  locality?: Maybe<Scalars['String']>;
  organisation?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  sortingCode?: Maybe<Scalars['String']>;
};

export type AddressInput = {
  givenName?: Maybe<Scalars['String']>;
  additionalNames?: Maybe<Scalars['String']>;
  familyName?: Maybe<Scalars['String']>;
  organisation?: Maybe<Scalars['String']>;
  addressLine1: Scalars['String'];
  addressLine2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  sortingCode?: Maybe<Scalars['String']>;
  dependentLocality?: Maybe<Scalars['String']>;
  locality?: Maybe<Scalars['String']>;
  administrativeArea?: Maybe<Scalars['String']>;
  country: CountryCodes;
};

export enum CountryCodes {
  AF = 'AF',
  AX = 'AX',
  AL = 'AL',
  DZ = 'DZ',
  AS = 'AS',
  AD = 'AD',
  AO = 'AO',
  AI = 'AI',
  AQ = 'AQ',
  AG = 'AG',
  AR = 'AR',
  AM = 'AM',
  AW = 'AW',
  AU = 'AU',
  AT = 'AT',
  AZ = 'AZ',
  BS = 'BS',
  BH = 'BH',
  BD = 'BD',
  BB = 'BB',
  BY = 'BY',
  BE = 'BE',
  BZ = 'BZ',
  BJ = 'BJ',
  BM = 'BM',
  BT = 'BT',
  BO = 'BO',
  BQ = 'BQ',
  BA = 'BA',
  BW = 'BW',
  BV = 'BV',
  BR = 'BR',
  IO = 'IO',
  BN = 'BN',
  BG = 'BG',
  BF = 'BF',
  BI = 'BI',
  CV = 'CV',
  KH = 'KH',
  CM = 'CM',
  CA = 'CA',
  KY = 'KY',
  CF = 'CF',
  TD = 'TD',
  CL = 'CL',
  CN = 'CN',
  CX = 'CX',
  CC = 'CC',
  CO = 'CO',
  KM = 'KM',
  CG = 'CG',
  CD = 'CD',
  CK = 'CK',
  CR = 'CR',
  CI = 'CI',
  HR = 'HR',
  CU = 'CU',
  CW = 'CW',
  CY = 'CY',
  CZ = 'CZ',
  DK = 'DK',
  DJ = 'DJ',
  DM = 'DM',
  DO = 'DO',
  EC = 'EC',
  EG = 'EG',
  SV = 'SV',
  GQ = 'GQ',
  ER = 'ER',
  EE = 'EE',
  SZ = 'SZ',
  ET = 'ET',
  FK = 'FK',
  FO = 'FO',
  FJ = 'FJ',
  FI = 'FI',
  FR = 'FR',
  GF = 'GF',
  PF = 'PF',
  TF = 'TF',
  GA = 'GA',
  GM = 'GM',
  GE = 'GE',
  DE = 'DE',
  GH = 'GH',
  GI = 'GI',
  GR = 'GR',
  GL = 'GL',
  GD = 'GD',
  GP = 'GP',
  GU = 'GU',
  GT = 'GT',
  GG = 'GG',
  GN = 'GN',
  GW = 'GW',
  GY = 'GY',
  HT = 'HT',
  HM = 'HM',
  VA = 'VA',
  HN = 'HN',
  HK = 'HK',
  HU = 'HU',
  IS = 'IS',
  IN = 'IN',
  ID = 'ID',
  IR = 'IR',
  IQ = 'IQ',
  IE = 'IE',
  IM = 'IM',
  IL = 'IL',
  IT = 'IT',
  JM = 'JM',
  JP = 'JP',
  JE = 'JE',
  JO = 'JO',
  KZ = 'KZ',
  KE = 'KE',
  KI = 'KI',
  KP = 'KP',
  KR = 'KR',
  KW = 'KW',
  KG = 'KG',
  LA = 'LA',
  LV = 'LV',
  LB = 'LB',
  LS = 'LS',
  LR = 'LR',
  LY = 'LY',
  LI = 'LI',
  LT = 'LT',
  LU = 'LU',
  MO = 'MO',
  MG = 'MG',
  MW = 'MW',
  MY = 'MY',
  MV = 'MV',
  ML = 'ML',
  MT = 'MT',
  MH = 'MH',
  MQ = 'MQ',
  MR = 'MR',
  MU = 'MU',
  YT = 'YT',
  MX = 'MX',
  FM = 'FM',
  MD = 'MD',
  MC = 'MC',
  MN = 'MN',
  ME = 'ME',
  MS = 'MS',
  MA = 'MA',
  MZ = 'MZ',
  MM = 'MM',
  NA = 'NA',
  NR = 'NR',
  NP = 'NP',
  NL = 'NL',
  NC = 'NC',
  NZ = 'NZ',
  NI = 'NI',
  NE = 'NE',
  NG = 'NG',
  NU = 'NU',
  NF = 'NF',
  MK = 'MK',
  MP = 'MP',
  NO = 'NO',
  OM = 'OM',
  PK = 'PK',
  PW = 'PW',
  PS = 'PS',
  PA = 'PA',
  PG = 'PG',
  PY = 'PY',
  PE = 'PE',
  PH = 'PH',
  PN = 'PN',
  PL = 'PL',
  PT = 'PT',
  PR = 'PR',
  QA = 'QA',
  RE = 'RE',
  RO = 'RO',
  RU = 'RU',
  RW = 'RW',
  BL = 'BL',
  SH = 'SH',
  KN = 'KN',
  LC = 'LC',
  MF = 'MF',
  PM = 'PM',
  VC = 'VC',
  WS = 'WS',
  SM = 'SM',
  ST = 'ST',
  SA = 'SA',
  SN = 'SN',
  RS = 'RS',
  SC = 'SC',
  SL = 'SL',
  SG = 'SG',
  SX = 'SX',
  SK = 'SK',
  SI = 'SI',
  SB = 'SB',
  SO = 'SO',
  ZA = 'ZA',
  GS = 'GS',
  SS = 'SS',
  ES = 'ES',
  LK = 'LK',
  SD = 'SD',
  SR = 'SR',
  SJ = 'SJ',
  SE = 'SE',
  CH = 'CH',
  SY = 'SY',
  TW = 'TW',
  TJ = 'TJ',
  TZ = 'TZ',
  TH = 'TH',
  TL = 'TL',
  TG = 'TG',
  TK = 'TK',
  TO = 'TO',
  TT = 'TT',
  TN = 'TN',
  TR = 'TR',
  TM = 'TM',
  TC = 'TC',
  TV = 'TV',
  UG = 'UG',
  UA = 'UA',
  AE = 'AE',
  GB = 'GB',
  US = 'US',
  UM = 'UM',
  UY = 'UY',
  UZ = 'UZ',
  VU = 'VU',
  VE = 'VE',
  VN = 'VN',
  VG = 'VG',
  VI = 'VI',
  WF = 'WF',
  EH = 'EH',
  YE = 'YE',
  ZM = 'ZM',
  ZW = 'ZW',
}

/**
 * Local DateTime generic
 *
 * For use where the local time is important (e.g. a group start date).
 */
export type LocalDateTime = {
  /** UTC time of the format YYYY-MM-DDThh:mm:ss.sssZ */
  utc: Scalars['AWSDateTime'];
  /**
   * Timezone
   *
   * Must be a canonical timezone from the IANA dataset.
   * https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
   */
  zone: Scalars['String'];
};

export type Hosts = Nodes & {
  items: Array<Maybe<Host>>;
  nextToken?: Maybe<Scalars['String']>;
};

export type Host = Node & {
  id: Scalars['ID'];
  name: Scalars['String'];
  urlSlug: Scalars['String'];
  active: Scalars['Boolean'];
  about: Scalars['String'];
  legalName?: Maybe<Scalars['String']>;
  termsConditions?: Maybe<Scalars['String']>;
  /** Official Registration Address */
  businessAddress?: Maybe<Address>;
  contact?: Maybe<HostContactDetails>;
  paymentDetails?: Maybe<HostPaymentDetails>;
  website?: Maybe<Scalars['AWSURL']>;
  facebookPage?: Maybe<Scalars['AWSURL']>;
  twitterPage?: Maybe<Scalars['AWSURL']>;
  updated: Scalars['AWSDateTime'];
  created: Scalars['AWSDateTime'];
  /** Users with permissions to manage host */
  userRoles?: Maybe<Array<Maybe<HostRole>>>;
  /** Hosts' bookings, ordered by created date */
  bookings: BookingConnection;
  trips: TripConnection;
};

export type HostBookingsArgs = {
  limit?: Maybe<Scalars['Int']>;
  nextToken?: Maybe<Scalars['String']>;
};

export type HostPaymentDetails = {
  currency: Currency;
  tmtIdLegacy?: Maybe<Scalars['String']>;
  tmtId?: Maybe<Scalars['Int']>;
  bankAccountName: Scalars['String'];
  bankName: Scalars['String'];
  bankAddress: Address;
  accountNumber: Scalars['String'];
  ibanNumber: Scalars['String'];
  sortCode: Scalars['String'];
  routingCode: Scalars['String'];
  swiftCode: Scalars['String'];
};

export type HostContactDetails = {
  contactName: Scalars['String'];
  email: Scalars['String'];
  phone: Scalars['String'];
  /** Mailing Address for Contact Purpose */
  address: Address;
};

export type HostBusinessDetails = {
  legalName: Scalars['String'];
  /** Official Registration Address */
  businessAddress: Address;
};

export type HostContactDetailsInput = {
  contactName: Scalars['String'];
  email: Scalars['String'];
  phone: Scalars['String'];
  /** Mailing Address for Contact Purpose */
  address: AddressInput;
};

export type HostBusinessDetailsInput = {
  legalName: Scalars['String'];
  /** Official Registration Address */
  businessAddress: AddressInput;
};

export type HostProfileInput = {
  name: Scalars['String'];
  about: Scalars['String'];
  website?: Maybe<Scalars['AWSURL']>;
  facebookPage?: Maybe<Scalars['AWSURL']>;
  twitterPage?: Maybe<Scalars['AWSURL']>;
};

export type UpdateHostProfileInput = {
  name?: Maybe<Scalars['String']>;
  about?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['AWSURL']>;
  facebookPage?: Maybe<Scalars['AWSURL']>;
  twitterPage?: Maybe<Scalars['AWSURL']>;
};

export type HostRole = {
  id: Scalars['ID'];
  user: Ref;
  host: Host;
  role: HostRoleType;
  updated: Scalars['AWSDateTime'];
  created: Scalars['AWSDateTime'];
};

export enum HostRoleType {
  ADMIN = 'ADMIN',
}

export type TripFormSettingsInput = {
  tripId: Scalars['ID'];
  emergencyContact?: Maybe<Scalars['Boolean']>;
  travelInformation?: Maybe<Scalars['Boolean']>;
  passportInformation?: Maybe<Scalars['Boolean']>;
  travelInsurance?: Maybe<Scalars['Boolean']>;
};

export type TripFormInput = {
  guest: Scalars['ID'];
  additionalInformation?: Maybe<Scalars['String']>;
  emergencyContact?: Maybe<TripFormEmergencyContactInput>;
  travelInformation?: Maybe<TripFormTravelInformationInput>;
  passportInformation?: Maybe<TripFormPassportInformationInput>;
  travelInsurance?: Maybe<TripFormTravelInsuranceInput>;
};

export type TripFormEmergencyContactInput = {
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['AWSPhone']>;
  email?: Maybe<Scalars['AWSEmail']>;
  relationship?: Maybe<Scalars['String']>;
};

export type TripFormTravelInformationInput = {
  arrivalFlightNumber?: Maybe<Scalars['String']>;
  arrivalTime?: Maybe<Scalars['AWSDateTime']>;
  departureFlightNumber?: Maybe<Scalars['String']>;
  departureTime?: Maybe<Scalars['AWSDateTime']>;
};

export type TripFormPassportInformationInput = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  passportNumber?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['AWSDateTime']>;
  issueDate?: Maybe<Scalars['AWSDateTime']>;
  expiryDate?: Maybe<Scalars['AWSDateTime']>;
  gender?: Maybe<Gender>;
};

export type TripFormTravelInsuranceInput = {
  company?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['AWSPhone']>;
  policyNumber?: Maybe<Scalars['String']>;
};

export type TripFormSettings = {
  tripId: Scalars['ID'];
  emergencyContact?: Maybe<Scalars['Boolean']>;
  travelInformation?: Maybe<Scalars['Boolean']>;
  passportInformation?: Maybe<Scalars['Boolean']>;
  travelInsurance?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['AWSDateTime']>;
};

export type TripForm = {
  guest: Guest;
  additionalInformation?: Maybe<Scalars['String']>;
  emergencyContact?: Maybe<TripFormEmergencyContact>;
  travelInformation?: Maybe<TripFormTravelInformation>;
  passportInformation?: Maybe<TripFormPassportInformation>;
  travelInsurance?: Maybe<TripFormTravelInsurance>;
  updatedAt?: Maybe<Scalars['AWSDateTime']>;
};

export type TripFormEmergencyContact = {
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['AWSPhone']>;
  email?: Maybe<Scalars['AWSEmail']>;
  relationship?: Maybe<Scalars['String']>;
};

export type TripFormTravelInformation = {
  arrivalFlightNumber?: Maybe<Scalars['String']>;
  arrivalTime?: Maybe<Scalars['AWSDateTime']>;
  departureFlightNumber?: Maybe<Scalars['String']>;
  departureTime?: Maybe<Scalars['AWSDateTime']>;
};

export type TripFormPassportInformation = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  passportNumber?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['AWSDateTime']>;
  issueDate?: Maybe<Scalars['AWSDateTime']>;
  expiryDate?: Maybe<Scalars['AWSDateTime']>;
  gender?: Maybe<Gender>;
};

export type TripFormTravelInsurance = {
  company?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['AWSPhone']>;
  policyNumber?: Maybe<Scalars['String']>;
};

export type TripConnection = {
  items?: Maybe<Array<Maybe<Trip>>>;
};

export type Group = Node & {
  bookings?: Maybe<BookingConnection>;
  end: LocalDateTime;
  /**
   * Guest Max Deduction
   *
   * The maximum combination of discounts and credits that can be used on the trip (typically this is the same as the
   * deposit.
   */
  hostPrice: Price;
  id: Scalars['ID'];
  /** Private groups are not visible on the main trip page. They can be shared with a direct link to the group. */
  private?: Maybe<Scalars['Boolean']>;
  remainingSpaces: Scalars['Int'];
  start: LocalDateTime;
  trip: Ref;
};

export type GroupConnection = {
  items?: Maybe<Array<Maybe<Group>>>;
};

export type Rating = {
  /**  Ratings score as a percentage  */
  score: Scalars['Float'];
  /**  Number of votes  */
  votes: Scalars['Int'];
};

export type User = Node & {
  id: Scalars['ID'];
  email: Scalars['AWSEmail'];
  givenName: Scalars['String'];
  familyName: Scalars['String'];
  phone?: Maybe<Scalars['AWSPhone']>;
};

export type BookingQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type BookingQuery = {
  booking: {
    id: string;
    commissionTaxRate: BookingCommissionTaxRate;
    host: { id: string };
    group: { start: { utc: string } };
    user: { id: string };
    spaces: Array<{
      id: string;
      invoice: Array<{
        id: string;
        type: BookingSpaceInvoiceLineType;
        transaction?: Maybe<{ id: string; processor: TransactionProcessor }>;
        guestAmount: {
          amountZD: number;
          currency: Currency;
          overpaymentZD?: Maybe<number>;
        };
        hostAmount: {
          amountZD: number;
          currency: Currency;
          overpaymentZD?: Maybe<number>;
        };
      }>;
    }>;
  };
};

export const BookingDocument: DocumentNode<
  BookingQuery,
  BookingQueryVariables
> = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Booking' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'booking' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'host' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'commissionTaxRate' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'group' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'start' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'utc' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'user' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'spaces' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'invoice' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'transaction' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'processor' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'guestAmount' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'amountZD' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'currency' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'overpaymentZD',
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'hostAmount' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'amountZD' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'currency' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'overpaymentZD',
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
};
